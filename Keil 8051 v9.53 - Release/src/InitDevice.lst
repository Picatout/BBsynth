C51 COMPILER V9.53.0.0   INITDEVICE                                                        01/06/2018 21:50:57 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\Jacques
                    -\SimplicityStudio\v4_workspace\BBsynth2\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATF
                    -UZZY(3) OPTIMIZE(9,SPEED) DEFINE(NDEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\Jacques\SimplicityStudio\v4_work
                    -space\BBsynth2\inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.0//Device/shared/si8051base;C:/SiliconLab
                    -s/SimplicityStudio/v4/developer/sdks/8051/v4.1.0//Device/EFM8BB1/inc) REGFILE(BBsynth2.ORC) PRINT(.\src\InitDevice.lst) 
                    -COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8BB1_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void enter_DefaultMode_from_RESET(void) {
  23   1              // $[Config Calls]
  24   1              WDT_0_enter_DefaultMode_from_RESET();
  25   1              PORTS_0_enter_DefaultMode_from_RESET();
  26   1              PORTS_1_enter_DefaultMode_from_RESET();
  27   1              PBCFG_0_enter_DefaultMode_from_RESET();
  28   1              CLOCK_0_enter_DefaultMode_from_RESET();
  29   1              PCA_0_enter_DefaultMode_from_RESET();
  30   1              PCACH_0_enter_DefaultMode_from_RESET();
  31   1              PCACH_1_enter_DefaultMode_from_RESET();
  32   1              PCACH_2_enter_DefaultMode_from_RESET();
  33   1              INTERRUPT_0_enter_DefaultMode_from_RESET();
  34   1              // [Config Calls]$
  35   1      
  36   1      }
  37          
  38          extern void WDT_0_enter_DefaultMode_from_RESET(void) {
  39   1              // $[WDTCN - Watchdog Timer Control]
  40   1              //Disable Watchdog with key sequence
  41   1              WDTCN = 0xDE; //First key
  42   1              WDTCN = 0xAD; //Second key
  43   1              // [WDTCN - Watchdog Timer Control]$
  44   1      
  45   1      }
  46          
  47          extern void PORTS_0_enter_DefaultMode_from_RESET(void) {
  48   1              // $[P0 - Port 0 Pin Latch]
  49   1              // [P0 - Port 0 Pin Latch]$
  50   1      
  51   1              // $[P0MDOUT - Port 0 Output Mode]
C51 COMPILER V9.53.0.0   INITDEVICE                                                        01/06/2018 21:50:57 PAGE 2   

  52   1              // [P0MDOUT - Port 0 Output Mode]$
  53   1      
  54   1              // $[P0MDIN - Port 0 Input Mode]
  55   1              // [P0MDIN - Port 0 Input Mode]$
  56   1      
  57   1              // $[P0SKIP - Port 0 Skip]
  58   1              /***********************************************************************
  59   1               - P0.0 pin is skipped by the crossbar
  60   1               - P0.1 pin is skipped by the crossbar
  61   1               - P0.2 pin is skipped by the crossbar
  62   1               - P0.3 pin is skipped by the crossbar
  63   1               - P0.4 pin is skipped by the crossbar
  64   1               - P0.5 pin is skipped by the crossbar
  65   1               - P0.6 pin is skipped by the crossbar
  66   1               - P0.7 pin is skipped by the crossbar
  67   1               ***********************************************************************/
  68   1              P0SKIP = P0SKIP_B0__SKIPPED | P0SKIP_B1__SKIPPED | P0SKIP_B2__SKIPPED
  69   1                              | P0SKIP_B3__SKIPPED | P0SKIP_B4__SKIPPED | P0SKIP_B5__SKIPPED
  70   1                              | P0SKIP_B6__SKIPPED | P0SKIP_B7__SKIPPED;
  71   1              // [P0SKIP - Port 0 Skip]$
  72   1      
  73   1              // $[P0MASK - Port 0 Mask]
  74   1              // [P0MASK - Port 0 Mask]$
  75   1      
  76   1              // $[P0MAT - Port 0 Match]
  77   1              // [P0MAT - Port 0 Match]$
  78   1      
  79   1      }
  80          
  81          extern void PORTS_1_enter_DefaultMode_from_RESET(void) {
  82   1              // $[P1 - Port 1 Pin Latch]
  83   1              // [P1 - Port 1 Pin Latch]$
  84   1      
  85   1              // $[P1MDOUT - Port 1 Output Mode]
  86   1              // [P1MDOUT - Port 1 Output Mode]$
  87   1      
  88   1              // $[P1MDIN - Port 1 Input Mode]
  89   1              // [P1MDIN - Port 1 Input Mode]$
  90   1      
  91   1              // $[P1SKIP - Port 1 Skip]
  92   1              /***********************************************************************
  93   1               - P1.0 pin is skipped by the crossbar
  94   1               - P1.1 pin is skipped by the crossbar
  95   1               - P1.2 pin is skipped by the crossbar
  96   1               - P1.3 pin is skipped by the crossbar
  97   1               ***********************************************************************/
  98   1              P1SKIP = P1SKIP_B0__SKIPPED | P1SKIP_B1__SKIPPED | P1SKIP_B2__SKIPPED
  99   1                              | P1SKIP_B3__SKIPPED;
 100   1              // [P1SKIP - Port 1 Skip]$
 101   1      
 102   1              // $[P1MASK - Port 1 Mask]
 103   1              // [P1MASK - Port 1 Mask]$
 104   1      
 105   1              // $[P1MAT - Port 1 Match]
 106   1              // [P1MAT - Port 1 Match]$
 107   1      
 108   1      }
 109          
 110          extern void PBCFG_0_enter_DefaultMode_from_RESET(void) {
 111   1              // $[XBR2 - Port I/O Crossbar 2]
 112   1              /***********************************************************************
 113   1               - Weak Pullups enabled 
 114   1               - Crossbar enabled
C51 COMPILER V9.53.0.0   INITDEVICE                                                        01/06/2018 21:50:57 PAGE 3   

 115   1               ***********************************************************************/
 116   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED;
 117   1              // [XBR2 - Port I/O Crossbar 2]$
 118   1      
 119   1              // $[PRTDRV - Port Drive Strength]
 120   1              // [PRTDRV - Port Drive Strength]$
 121   1      
 122   1              // $[XBR0 - Port I/O Crossbar 0]
 123   1              // [XBR0 - Port I/O Crossbar 0]$
 124   1      
 125   1              // $[XBR1 - Port I/O Crossbar 1]
 126   1              // [XBR1 - Port I/O Crossbar 1]$
 127   1      
 128   1      }
 129          
 130          extern void CLOCK_0_enter_DefaultMode_from_RESET(void) {
 131   1              // $[CLKSEL - Clock Select]
 132   1              /***********************************************************************
 133   1               - Clock derived from the Internal High-Frequency Oscillator
 134   1               - SYSCLK is equal to selected clock source divided by 4
 135   1               ***********************************************************************/
 136   1              CLKSEL = CLKSEL_CLKSL__HFOSC | CLKSEL_CLKDIV__SYSCLK_DIV_4;
 137   1              // [CLKSEL - Clock Select]$
 138   1      
 139   1      }
 140          
 141          extern void PCA_0_enter_DefaultMode_from_RESET(void) {
 142   1              // $[PCA Off]
 143   1              PCA0CN0_CR = PCA0CN0_CR__STOP;
 144   1              // [PCA Off]$
 145   1      
 146   1              // $[PCA0MD - PCA Mode]
 147   1              // [PCA0MD - PCA Mode]$
 148   1      
 149   1              // $[PCA0CENT - PCA Center Alignment Enable]
 150   1              // [PCA0CENT - PCA Center Alignment Enable]$
 151   1      
 152   1              // $[PCA0CLR - PCA Comparator Clear Control]
 153   1              // [PCA0CLR - PCA Comparator Clear Control]$
 154   1      
 155   1              // $[PCA0L - PCA Counter/Timer Low Byte]
 156   1              // [PCA0L - PCA Counter/Timer Low Byte]$
 157   1      
 158   1              // $[PCA0H - PCA Counter/Timer High Byte]
 159   1              // [PCA0H - PCA Counter/Timer High Byte]$
 160   1      
 161   1              // $[PCA0POL - PCA Output Polarity]
 162   1              // [PCA0POL - PCA Output Polarity]$
 163   1      
 164   1              // $[PCA0PWM - PCA PWM Configuration]
 165   1              // [PCA0PWM - PCA PWM Configuration]$
 166   1      
 167   1              // $[PCA On]
 168   1              PCA0CN0_CR = PCA0CN0_CR__RUN;
 169   1              // [PCA On]$
 170   1      
 171   1      }
 172          
 173          extern void PCACH_0_enter_DefaultMode_from_RESET(void) {
 174   1              // $[PCA0 Settings Save]
 175   1              // Select Capture/Compare register)
 176   1              PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
 177   1              // [PCA0 Settings Save]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        01/06/2018 21:50:57 PAGE 4   

 178   1      
 179   1              // $[PCA0CPM0 - PCA Channel 0 Capture/Compare Mode]
 180   1              /***********************************************************************
 181   1               - Disable negative edge capture
 182   1               - Enable a Capture/Compare Flag interrupt request when CCF0 is set
 183   1               - Enable match function
 184   1               - 8 to 11-bit PWM selected
 185   1               - Disable positive edge capture
 186   1               - Enable comparator function
 187   1               - Disable PWM function
 188   1               - Disable toggle function
 189   1               ***********************************************************************/
 190   1              PCA0CPM0 = PCA0CPM0_CAPN__DISABLED | PCA0CPM0_ECCF__ENABLED
 191   1                              | PCA0CPM0_MAT__ENABLED | PCA0CPM0_PWM16__8_BIT
 192   1                              | PCA0CPM0_CAPP__DISABLED | PCA0CPM0_ECOM__ENABLED
 193   1                              | PCA0CPM0_PWM__DISABLED | PCA0CPM0_TOG__DISABLED;
 194   1              // [PCA0CPM0 - PCA Channel 0 Capture/Compare Mode]$
 195   1      
 196   1              // $[PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]
 197   1              // [PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]$
 198   1      
 199   1              // $[PCA0CPH0 - PCA Channel 0 Capture Module High Byte]
 200   1              // [PCA0CPH0 - PCA Channel 0 Capture Module High Byte]$
 201   1      
 202   1              // $[Auto-reload]
 203   1              // [Auto-reload]$
 204   1      
 205   1              // $[PCA0 Settings Restore]
 206   1              // [PCA0 Settings Restore]$
 207   1      
 208   1      }
 209          
 210          extern void PCACH_1_enter_DefaultMode_from_RESET(void) {
 211   1              // $[PCA0 Settings Save]
 212   1              // Select Capture/Compare register)
 213   1              PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
 214   1              // [PCA0 Settings Save]$
 215   1      
 216   1              // $[PCA0CPM1 - PCA Channel 1 Capture/Compare Mode]
 217   1              /***********************************************************************
 218   1               - Disable negative edge capture
 219   1               - Disable CCF1 interrupts
 220   1               - Enable match function
 221   1               - 8 to 11-bit PWM selected
 222   1               - Disable positive edge capture
 223   1               - Disable comparator function
 224   1               - Disable PWM function
 225   1               - Disable toggle function
 226   1               ***********************************************************************/
 227   1              PCA0CPM1 = PCA0CPM1_CAPN__DISABLED | PCA0CPM1_ECCF__DISABLED
 228   1                              | PCA0CPM1_MAT__ENABLED | PCA0CPM1_PWM16__8_BIT
 229   1                              | PCA0CPM1_CAPP__DISABLED | PCA0CPM1_ECOM__DISABLED
 230   1                              | PCA0CPM1_PWM__DISABLED | PCA0CPM1_TOG__DISABLED;
 231   1              // [PCA0CPM1 - PCA Channel 1 Capture/Compare Mode]$
 232   1      
 233   1              // $[PCA0CPL1 - PCA Channel 1 Capture Module Low Byte]
 234   1              // [PCA0CPL1 - PCA Channel 1 Capture Module Low Byte]$
 235   1      
 236   1              // $[PCA0CPH1 - PCA Channel 1 Capture Module High Byte]
 237   1              // [PCA0CPH1 - PCA Channel 1 Capture Module High Byte]$
 238   1      
 239   1              // $[Auto-reload]
 240   1              // [Auto-reload]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        01/06/2018 21:50:57 PAGE 5   

 241   1      
 242   1              // $[PCA0 Settings Restore]
 243   1              // [PCA0 Settings Restore]$
 244   1      
 245   1      }
 246          
 247          extern void PCACH_2_enter_DefaultMode_from_RESET(void) {
 248   1              // $[PCA0 Settings Save]
 249   1              // Select Capture/Compare register)
 250   1              PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
 251   1              // [PCA0 Settings Save]$
 252   1      
 253   1              // $[PCA0CPM2 - PCA Channel 2 Capture/Compare Mode]
 254   1              /***********************************************************************
 255   1               - Disable negative edge capture
 256   1               - Disable CCF2 interrupts
 257   1               - Enable match function
 258   1               - 8 to 11-bit PWM selected
 259   1               - Disable positive edge capture
 260   1               - Disable comparator function
 261   1               - Disable PWM function
 262   1               - Disable toggle function
 263   1               ***********************************************************************/
 264   1              PCA0CPM2 = PCA0CPM2_CAPN__DISABLED | PCA0CPM2_ECCF__DISABLED
 265   1                              | PCA0CPM2_MAT__ENABLED | PCA0CPM2_PWM16__8_BIT
 266   1                              | PCA0CPM2_CAPP__DISABLED | PCA0CPM2_ECOM__DISABLED
 267   1                              | PCA0CPM2_PWM__DISABLED | PCA0CPM2_TOG__DISABLED;
 268   1              // [PCA0CPM2 - PCA Channel 2 Capture/Compare Mode]$
 269   1      
 270   1              // $[PCA0CPL2 - PCA Channel 2 Capture Module Low Byte]
 271   1              // [PCA0CPL2 - PCA Channel 2 Capture Module Low Byte]$
 272   1      
 273   1              // $[PCA0CPH2 - PCA Channel 2 Capture Module High Byte]
 274   1              // [PCA0CPH2 - PCA Channel 2 Capture Module High Byte]$
 275   1      
 276   1              // $[Auto-reload]
 277   1              // [Auto-reload]$
 278   1      
 279   1              // $[PCA0 Settings Restore]
 280   1              // [PCA0 Settings Restore]$
 281   1      
 282   1      }
 283          
 284          extern void INTERRUPT_0_enter_DefaultMode_from_RESET(void) {
 285   1              // $[EIE1 - Extended Interrupt Enable 1]
 286   1              /***********************************************************************
 287   1               - Disable ADC0 Conversion Complete interrupt
 288   1               - Disable ADC0 Window Comparison interrupt
 289   1               - Disable CP0 interrupts
 290   1               - Disable CP1 interrupts
 291   1               - Disable all Port Match interrupts
 292   1               - Enable interrupt requests generated by PCA0
 293   1               - Disable all SMB0 interrupts
 294   1               - Disable Timer 3 interrupts
 295   1               ***********************************************************************/
 296   1              EIE1 = EIE1_EADC0__DISABLED | EIE1_EWADC0__DISABLED | EIE1_ECP0__DISABLED
 297   1                              | EIE1_ECP1__DISABLED | EIE1_EMAT__DISABLED | EIE1_EPCA0__ENABLED
 298   1                              | EIE1_ESMB0__DISABLED | EIE1_ET3__DISABLED;
 299   1              // [EIE1 - Extended Interrupt Enable 1]$
 300   1      
 301   1              // $[EIP1 - Extended Interrupt Priority 1]
 302   1              // [EIP1 - Extended Interrupt Priority 1]$
 303   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        01/06/2018 21:50:57 PAGE 6   

 304   1              // $[IE - Interrupt Enable]
 305   1              /***********************************************************************
 306   1               - Enable each interrupt according to its individual mask setting
 307   1               - Disable external interrupt 0
 308   1               - Disable external interrupt 1
 309   1               - Disable all SPI0 interrupts
 310   1               - Disable all Timer 0 interrupt
 311   1               - Disable all Timer 1 interrupt
 312   1               - Disable Timer 2 interrupt
 313   1               - Disable UART0 interrupt
 314   1               ***********************************************************************/
 315   1              IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED
 316   1                              | IE_ESPI0__DISABLED | IE_ET0__DISABLED | IE_ET1__DISABLED
 317   1                              | IE_ET2__DISABLED | IE_ES0__DISABLED;
 318   1              // [IE - Interrupt Enable]$
 319   1      
 320   1              // $[IP - Interrupt Priority]
 321   1              // [IP - Interrupt Priority]$
 322   1      
 323   1      }
 324          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     86    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
